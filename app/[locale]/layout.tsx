import type { Metadata } from 'next';
import localFont from 'next/font/local';
import { NextIntlClientProvider } from 'next-intl';
import { notFound } from 'next/navigation';
import { ThemeProvider } from '@/contexts/ThemeContext';
import { Analytics } from '@vercel/analytics/react';
import '@/app/globals.css';

const geistSans = localFont({
  src: '../fonts/GeistVF.woff',
  variable: '--font-geist-sans',
  weight: '100 900',
});

const geistMono = localFont({
  src: '../fonts/GeistMonoVF.woff',
  variable: '--font-geist-mono',
  weight: '100 900',
});

export const metadata = {
  verification: {
    google: 'ya5cBfllEEWq8mqy2fudC48DhPfyusx-Ov0Aack1o2A',
  },
};

const validLocales = ['en', 'es'] as const;

export function generateStaticParams() {
  return validLocales.map(locale => ({ locale }));
}

export async function generateMetadata(): Promise<Metadata> {
  return {
    title: 'Create Next App',
    description: 'Generated by create next app',
  };
}

export default async function RootLayout(props: { children: React.ReactNode; params: Promise<{ locale: string }> }) {
  const params = await props.params;

  const { children } = props;

  // Await the locale parameter
  const locale = await params.locale;

  // Validate locale after awaiting
  /* eslint-disable @typescript-eslint/no-explicit-any */
  if (!validLocales.includes(locale as any)) {
    notFound();
  }

  // Load messages
  let messages;
  try {
    messages = (await import(`../../messages/${locale}.json`)).default;
  } catch (error) {
    console.error(`Failed to load messages for locale ${locale}:`, error);
    notFound();
  }

  return (
    <html lang={locale} suppressHydrationWarning>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <NextIntlClientProvider locale={locale} messages={messages}>
          <ThemeProvider>{children}</ThemeProvider>
        </NextIntlClientProvider>
        <Analytics />
        <meta name="google-site-verification" content="ya5cBfllEEWq8mqy2fudC48DhPfyusx-Ov0Aack1o2A" />
      </body>
    </html>
  );
}
